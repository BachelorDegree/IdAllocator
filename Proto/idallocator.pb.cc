// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idallocator.proto

#include "idallocator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace idallocator {
class AllocateIdReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocateIdReq>
      _instance;
} _AllocateIdReq_default_instance_;
class AllocateIdRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocateIdResp>
      _instance;
} _AllocateIdResp_default_instance_;
class BatchAllocateIdReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchAllocateIdReq>
      _instance;
} _BatchAllocateIdReq_default_instance_;
class BatchAllocateIdRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchAllocateIdResp>
      _instance;
} _BatchAllocateIdResp_default_instance_;
}  // namespace idallocator
namespace protobuf_idallocator_2eproto {
static void InitDefaultsAllocateIdReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idallocator::_AllocateIdReq_default_instance_;
    new (ptr) ::idallocator::AllocateIdReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idallocator::AllocateIdReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AllocateIdReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllocateIdReq}, {}};

static void InitDefaultsAllocateIdResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idallocator::_AllocateIdResp_default_instance_;
    new (ptr) ::idallocator::AllocateIdResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idallocator::AllocateIdResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AllocateIdResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllocateIdResp}, {}};

static void InitDefaultsBatchAllocateIdReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idallocator::_BatchAllocateIdReq_default_instance_;
    new (ptr) ::idallocator::BatchAllocateIdReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idallocator::BatchAllocateIdReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BatchAllocateIdReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBatchAllocateIdReq}, {}};

static void InitDefaultsBatchAllocateIdResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idallocator::_BatchAllocateIdResp_default_instance_;
    new (ptr) ::idallocator::BatchAllocateIdResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idallocator::BatchAllocateIdResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BatchAllocateIdResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBatchAllocateIdResp}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AllocateIdReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllocateIdResp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchAllocateIdReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchAllocateIdResp.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::idallocator::AllocateIdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::idallocator::AllocateIdReq, id_namespace_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::idallocator::AllocateIdResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::idallocator::AllocateIdResp, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::idallocator::BatchAllocateIdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::idallocator::BatchAllocateIdReq, id_namespace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::idallocator::BatchAllocateIdReq, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::idallocator::BatchAllocateIdResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::idallocator::BatchAllocateIdResp, ids_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::idallocator::AllocateIdReq)},
  { 6, -1, sizeof(::idallocator::AllocateIdResp)},
  { 12, -1, sizeof(::idallocator::BatchAllocateIdReq)},
  { 19, -1, sizeof(::idallocator::BatchAllocateIdResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::idallocator::_AllocateIdReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::idallocator::_AllocateIdResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::idallocator::_BatchAllocateIdReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::idallocator::_BatchAllocateIdResp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "idallocator.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021idallocator.proto\022\013idallocator\"%\n\rAllo"
      "cateIdReq\022\024\n\014id_namespace\030\001 \001(\014\"\034\n\016Alloc"
      "ateIdResp\022\n\n\002id\030\001 \001(\004\"9\n\022BatchAllocateId"
      "Req\022\024\n\014id_namespace\030\001 \001(\014\022\r\n\005count\030\002 \001(\r"
      "\"\"\n\023BatchAllocateIdResp\022\013\n\003ids\030\001 \003(\0042\261\001\n"
      "\022IdAllocatorService\022E\n\nAllocateId\022\032.idal"
      "locator.AllocateIdReq\032\033.idallocator.Allo"
      "cateIdResp\022T\n\017BatchAllocateId\022\037.idalloca"
      "tor.BatchAllocateIdReq\032 .idallocator.Bat"
      "chAllocateIdRespb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "idallocator.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_idallocator_2eproto
namespace idallocator {

// ===================================================================

void AllocateIdReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateIdReq::kIdNamespaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateIdReq::AllocateIdReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_idallocator_2eproto::scc_info_AllocateIdReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:idallocator.AllocateIdReq)
}
AllocateIdReq::AllocateIdReq(const AllocateIdReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_namespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id_namespace().size() > 0) {
    id_namespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_namespace_);
  }
  // @@protoc_insertion_point(copy_constructor:idallocator.AllocateIdReq)
}

void AllocateIdReq::SharedCtor() {
  id_namespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AllocateIdReq::~AllocateIdReq() {
  // @@protoc_insertion_point(destructor:idallocator.AllocateIdReq)
  SharedDtor();
}

void AllocateIdReq::SharedDtor() {
  id_namespace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AllocateIdReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AllocateIdReq::descriptor() {
  ::protobuf_idallocator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_idallocator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocateIdReq& AllocateIdReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_idallocator_2eproto::scc_info_AllocateIdReq.base);
  return *internal_default_instance();
}


void AllocateIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:idallocator.AllocateIdReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_namespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AllocateIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:idallocator.AllocateIdReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id_namespace = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_namespace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:idallocator.AllocateIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:idallocator.AllocateIdReq)
  return false;
#undef DO_
}

void AllocateIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:idallocator.AllocateIdReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id_namespace = 1;
  if (this->id_namespace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id_namespace(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:idallocator.AllocateIdReq)
}

::google::protobuf::uint8* AllocateIdReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:idallocator.AllocateIdReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id_namespace = 1;
  if (this->id_namespace().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id_namespace(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idallocator.AllocateIdReq)
  return target;
}

size_t AllocateIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idallocator.AllocateIdReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes id_namespace = 1;
  if (this->id_namespace().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id_namespace());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateIdReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idallocator.AllocateIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateIdReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateIdReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idallocator.AllocateIdReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idallocator.AllocateIdReq)
    MergeFrom(*source);
  }
}

void AllocateIdReq::MergeFrom(const AllocateIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idallocator.AllocateIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id_namespace().size() > 0) {

    id_namespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_namespace_);
  }
}

void AllocateIdReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idallocator.AllocateIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateIdReq::CopyFrom(const AllocateIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idallocator.AllocateIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateIdReq::IsInitialized() const {
  return true;
}

void AllocateIdReq::Swap(AllocateIdReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateIdReq::InternalSwap(AllocateIdReq* other) {
  using std::swap;
  id_namespace_.Swap(&other->id_namespace_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AllocateIdReq::GetMetadata() const {
  protobuf_idallocator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_idallocator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AllocateIdResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateIdResp::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateIdResp::AllocateIdResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_idallocator_2eproto::scc_info_AllocateIdResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:idallocator.AllocateIdResp)
}
AllocateIdResp::AllocateIdResp(const AllocateIdResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:idallocator.AllocateIdResp)
}

void AllocateIdResp::SharedCtor() {
  id_ = GOOGLE_ULONGLONG(0);
}

AllocateIdResp::~AllocateIdResp() {
  // @@protoc_insertion_point(destructor:idallocator.AllocateIdResp)
  SharedDtor();
}

void AllocateIdResp::SharedDtor() {
}

void AllocateIdResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AllocateIdResp::descriptor() {
  ::protobuf_idallocator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_idallocator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocateIdResp& AllocateIdResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_idallocator_2eproto::scc_info_AllocateIdResp.base);
  return *internal_default_instance();
}


void AllocateIdResp::Clear() {
// @@protoc_insertion_point(message_clear_start:idallocator.AllocateIdResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool AllocateIdResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:idallocator.AllocateIdResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:idallocator.AllocateIdResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:idallocator.AllocateIdResp)
  return false;
#undef DO_
}

void AllocateIdResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:idallocator.AllocateIdResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:idallocator.AllocateIdResp)
}

::google::protobuf::uint8* AllocateIdResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:idallocator.AllocateIdResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idallocator.AllocateIdResp)
  return target;
}

size_t AllocateIdResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idallocator.AllocateIdResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateIdResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idallocator.AllocateIdResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateIdResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateIdResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idallocator.AllocateIdResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idallocator.AllocateIdResp)
    MergeFrom(*source);
  }
}

void AllocateIdResp::MergeFrom(const AllocateIdResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idallocator.AllocateIdResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void AllocateIdResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idallocator.AllocateIdResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateIdResp::CopyFrom(const AllocateIdResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idallocator.AllocateIdResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateIdResp::IsInitialized() const {
  return true;
}

void AllocateIdResp::Swap(AllocateIdResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateIdResp::InternalSwap(AllocateIdResp* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AllocateIdResp::GetMetadata() const {
  protobuf_idallocator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_idallocator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BatchAllocateIdReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchAllocateIdReq::kIdNamespaceFieldNumber;
const int BatchAllocateIdReq::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchAllocateIdReq::BatchAllocateIdReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_idallocator_2eproto::scc_info_BatchAllocateIdReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:idallocator.BatchAllocateIdReq)
}
BatchAllocateIdReq::BatchAllocateIdReq(const BatchAllocateIdReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_namespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id_namespace().size() > 0) {
    id_namespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_namespace_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:idallocator.BatchAllocateIdReq)
}

void BatchAllocateIdReq::SharedCtor() {
  id_namespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
}

BatchAllocateIdReq::~BatchAllocateIdReq() {
  // @@protoc_insertion_point(destructor:idallocator.BatchAllocateIdReq)
  SharedDtor();
}

void BatchAllocateIdReq::SharedDtor() {
  id_namespace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BatchAllocateIdReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BatchAllocateIdReq::descriptor() {
  ::protobuf_idallocator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_idallocator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchAllocateIdReq& BatchAllocateIdReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_idallocator_2eproto::scc_info_BatchAllocateIdReq.base);
  return *internal_default_instance();
}


void BatchAllocateIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:idallocator.BatchAllocateIdReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_namespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  _internal_metadata_.Clear();
}

bool BatchAllocateIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:idallocator.BatchAllocateIdReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id_namespace = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_namespace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:idallocator.BatchAllocateIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:idallocator.BatchAllocateIdReq)
  return false;
#undef DO_
}

void BatchAllocateIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:idallocator.BatchAllocateIdReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id_namespace = 1;
  if (this->id_namespace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id_namespace(), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:idallocator.BatchAllocateIdReq)
}

::google::protobuf::uint8* BatchAllocateIdReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:idallocator.BatchAllocateIdReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id_namespace = 1;
  if (this->id_namespace().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id_namespace(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idallocator.BatchAllocateIdReq)
  return target;
}

size_t BatchAllocateIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idallocator.BatchAllocateIdReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes id_namespace = 1;
  if (this->id_namespace().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id_namespace());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchAllocateIdReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idallocator.BatchAllocateIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchAllocateIdReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchAllocateIdReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idallocator.BatchAllocateIdReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idallocator.BatchAllocateIdReq)
    MergeFrom(*source);
  }
}

void BatchAllocateIdReq::MergeFrom(const BatchAllocateIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idallocator.BatchAllocateIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id_namespace().size() > 0) {

    id_namespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_namespace_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void BatchAllocateIdReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idallocator.BatchAllocateIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchAllocateIdReq::CopyFrom(const BatchAllocateIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idallocator.BatchAllocateIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchAllocateIdReq::IsInitialized() const {
  return true;
}

void BatchAllocateIdReq::Swap(BatchAllocateIdReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchAllocateIdReq::InternalSwap(BatchAllocateIdReq* other) {
  using std::swap;
  id_namespace_.Swap(&other->id_namespace_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BatchAllocateIdReq::GetMetadata() const {
  protobuf_idallocator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_idallocator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BatchAllocateIdResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchAllocateIdResp::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchAllocateIdResp::BatchAllocateIdResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_idallocator_2eproto::scc_info_BatchAllocateIdResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:idallocator.BatchAllocateIdResp)
}
BatchAllocateIdResp::BatchAllocateIdResp(const BatchAllocateIdResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idallocator.BatchAllocateIdResp)
}

void BatchAllocateIdResp::SharedCtor() {
}

BatchAllocateIdResp::~BatchAllocateIdResp() {
  // @@protoc_insertion_point(destructor:idallocator.BatchAllocateIdResp)
  SharedDtor();
}

void BatchAllocateIdResp::SharedDtor() {
}

void BatchAllocateIdResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BatchAllocateIdResp::descriptor() {
  ::protobuf_idallocator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_idallocator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchAllocateIdResp& BatchAllocateIdResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_idallocator_2eproto::scc_info_BatchAllocateIdResp.base);
  return *internal_default_instance();
}


void BatchAllocateIdResp::Clear() {
// @@protoc_insertion_point(message_clear_start:idallocator.BatchAllocateIdResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear();
}

bool BatchAllocateIdResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:idallocator.BatchAllocateIdResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:idallocator.BatchAllocateIdResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:idallocator.BatchAllocateIdResp)
  return false;
#undef DO_
}

void BatchAllocateIdResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:idallocator.BatchAllocateIdResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 ids = 1;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ids_cached_byte_size_));
  }
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:idallocator.BatchAllocateIdResp)
}

::google::protobuf::uint8* BatchAllocateIdResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:idallocator.BatchAllocateIdResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 ids = 1;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idallocator.BatchAllocateIdResp)
  return target;
}

size_t BatchAllocateIdResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idallocator.BatchAllocateIdResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchAllocateIdResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idallocator.BatchAllocateIdResp)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchAllocateIdResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchAllocateIdResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idallocator.BatchAllocateIdResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idallocator.BatchAllocateIdResp)
    MergeFrom(*source);
  }
}

void BatchAllocateIdResp::MergeFrom(const BatchAllocateIdResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idallocator.BatchAllocateIdResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void BatchAllocateIdResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idallocator.BatchAllocateIdResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchAllocateIdResp::CopyFrom(const BatchAllocateIdResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idallocator.BatchAllocateIdResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchAllocateIdResp::IsInitialized() const {
  return true;
}

void BatchAllocateIdResp::Swap(BatchAllocateIdResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchAllocateIdResp::InternalSwap(BatchAllocateIdResp* other) {
  using std::swap;
  ids_.InternalSwap(&other->ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BatchAllocateIdResp::GetMetadata() const {
  protobuf_idallocator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_idallocator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace idallocator
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::idallocator::AllocateIdReq* Arena::CreateMaybeMessage< ::idallocator::AllocateIdReq >(Arena* arena) {
  return Arena::CreateInternal< ::idallocator::AllocateIdReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::idallocator::AllocateIdResp* Arena::CreateMaybeMessage< ::idallocator::AllocateIdResp >(Arena* arena) {
  return Arena::CreateInternal< ::idallocator::AllocateIdResp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::idallocator::BatchAllocateIdReq* Arena::CreateMaybeMessage< ::idallocator::BatchAllocateIdReq >(Arena* arena) {
  return Arena::CreateInternal< ::idallocator::BatchAllocateIdReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::idallocator::BatchAllocateIdResp* Arena::CreateMaybeMessage< ::idallocator::BatchAllocateIdResp >(Arena* arena) {
  return Arena::CreateInternal< ::idallocator::BatchAllocateIdResp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
