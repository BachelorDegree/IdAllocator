// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: idallocator.proto

#include "idallocator.pb.h"
#include "idallocator.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace idallocator {

static const char* IdAllocatorService_method_names[] = {
  "/idallocator.IdAllocatorService/AllocateId",
  "/idallocator.IdAllocatorService/BatchAllocateId",
};

std::unique_ptr< IdAllocatorService::Stub> IdAllocatorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IdAllocatorService::Stub> stub(new IdAllocatorService::Stub(channel));
  return stub;
}

IdAllocatorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AllocateId_(IdAllocatorService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchAllocateId_(IdAllocatorService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IdAllocatorService::Stub::AllocateId(::grpc::ClientContext* context, const ::idallocator::AllocateIdReq& request, ::idallocator::AllocateIdResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AllocateId_, context, request, response);
}

void IdAllocatorService::Stub::experimental_async::AllocateId(::grpc::ClientContext* context, const ::idallocator::AllocateIdReq* request, ::idallocator::AllocateIdResp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AllocateId_, context, request, response, std::move(f));
}

void IdAllocatorService::Stub::experimental_async::AllocateId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::idallocator::AllocateIdResp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AllocateId_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::idallocator::AllocateIdResp>* IdAllocatorService::Stub::AsyncAllocateIdRaw(::grpc::ClientContext* context, const ::idallocator::AllocateIdReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::idallocator::AllocateIdResp>::Create(channel_.get(), cq, rpcmethod_AllocateId_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::idallocator::AllocateIdResp>* IdAllocatorService::Stub::PrepareAsyncAllocateIdRaw(::grpc::ClientContext* context, const ::idallocator::AllocateIdReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::idallocator::AllocateIdResp>::Create(channel_.get(), cq, rpcmethod_AllocateId_, context, request, false);
}

::grpc::Status IdAllocatorService::Stub::BatchAllocateId(::grpc::ClientContext* context, const ::idallocator::BatchAllocateIdReq& request, ::idallocator::BatchAllocateIdResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BatchAllocateId_, context, request, response);
}

void IdAllocatorService::Stub::experimental_async::BatchAllocateId(::grpc::ClientContext* context, const ::idallocator::BatchAllocateIdReq* request, ::idallocator::BatchAllocateIdResp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BatchAllocateId_, context, request, response, std::move(f));
}

void IdAllocatorService::Stub::experimental_async::BatchAllocateId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::idallocator::BatchAllocateIdResp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BatchAllocateId_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::idallocator::BatchAllocateIdResp>* IdAllocatorService::Stub::AsyncBatchAllocateIdRaw(::grpc::ClientContext* context, const ::idallocator::BatchAllocateIdReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::idallocator::BatchAllocateIdResp>::Create(channel_.get(), cq, rpcmethod_BatchAllocateId_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::idallocator::BatchAllocateIdResp>* IdAllocatorService::Stub::PrepareAsyncBatchAllocateIdRaw(::grpc::ClientContext* context, const ::idallocator::BatchAllocateIdReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::idallocator::BatchAllocateIdResp>::Create(channel_.get(), cq, rpcmethod_BatchAllocateId_, context, request, false);
}

IdAllocatorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IdAllocatorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IdAllocatorService::Service, ::idallocator::AllocateIdReq, ::idallocator::AllocateIdResp>(
          std::mem_fn(&IdAllocatorService::Service::AllocateId), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IdAllocatorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IdAllocatorService::Service, ::idallocator::BatchAllocateIdReq, ::idallocator::BatchAllocateIdResp>(
          std::mem_fn(&IdAllocatorService::Service::BatchAllocateId), this)));
}

IdAllocatorService::Service::~Service() {
}

::grpc::Status IdAllocatorService::Service::AllocateId(::grpc::ServerContext* context, const ::idallocator::AllocateIdReq* request, ::idallocator::AllocateIdResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IdAllocatorService::Service::BatchAllocateId(::grpc::ServerContext* context, const ::idallocator::BatchAllocateIdReq* request, ::idallocator::BatchAllocateIdResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace idallocator

