// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idallocator.proto

#ifndef PROTOBUF_INCLUDED_idallocator_2eproto
#define PROTOBUF_INCLUDED_idallocator_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_idallocator_2eproto 

namespace protobuf_idallocator_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_idallocator_2eproto
namespace idallocator {
class AllocateIdReq;
class AllocateIdReqDefaultTypeInternal;
extern AllocateIdReqDefaultTypeInternal _AllocateIdReq_default_instance_;
class AllocateIdResp;
class AllocateIdRespDefaultTypeInternal;
extern AllocateIdRespDefaultTypeInternal _AllocateIdResp_default_instance_;
class BatchAllocateIdReq;
class BatchAllocateIdReqDefaultTypeInternal;
extern BatchAllocateIdReqDefaultTypeInternal _BatchAllocateIdReq_default_instance_;
class BatchAllocateIdResp;
class BatchAllocateIdRespDefaultTypeInternal;
extern BatchAllocateIdRespDefaultTypeInternal _BatchAllocateIdResp_default_instance_;
}  // namespace idallocator
namespace google {
namespace protobuf {
template<> ::idallocator::AllocateIdReq* Arena::CreateMaybeMessage<::idallocator::AllocateIdReq>(Arena*);
template<> ::idallocator::AllocateIdResp* Arena::CreateMaybeMessage<::idallocator::AllocateIdResp>(Arena*);
template<> ::idallocator::BatchAllocateIdReq* Arena::CreateMaybeMessage<::idallocator::BatchAllocateIdReq>(Arena*);
template<> ::idallocator::BatchAllocateIdResp* Arena::CreateMaybeMessage<::idallocator::BatchAllocateIdResp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace idallocator {

// ===================================================================

class AllocateIdReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idallocator.AllocateIdReq) */ {
 public:
  AllocateIdReq();
  virtual ~AllocateIdReq();

  AllocateIdReq(const AllocateIdReq& from);

  inline AllocateIdReq& operator=(const AllocateIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocateIdReq(AllocateIdReq&& from) noexcept
    : AllocateIdReq() {
    *this = ::std::move(from);
  }

  inline AllocateIdReq& operator=(AllocateIdReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateIdReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocateIdReq* internal_default_instance() {
    return reinterpret_cast<const AllocateIdReq*>(
               &_AllocateIdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AllocateIdReq* other);
  friend void swap(AllocateIdReq& a, AllocateIdReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocateIdReq* New() const final {
    return CreateMaybeMessage<AllocateIdReq>(NULL);
  }

  AllocateIdReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllocateIdReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllocateIdReq& from);
  void MergeFrom(const AllocateIdReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocateIdReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes id_namespace = 1;
  void clear_id_namespace();
  static const int kIdNamespaceFieldNumber = 1;
  const ::std::string& id_namespace() const;
  void set_id_namespace(const ::std::string& value);
  #if LANG_CXX11
  void set_id_namespace(::std::string&& value);
  #endif
  void set_id_namespace(const char* value);
  void set_id_namespace(const void* value, size_t size);
  ::std::string* mutable_id_namespace();
  ::std::string* release_id_namespace();
  void set_allocated_id_namespace(::std::string* id_namespace);

  // @@protoc_insertion_point(class_scope:idallocator.AllocateIdReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_namespace_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_idallocator_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllocateIdResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idallocator.AllocateIdResp) */ {
 public:
  AllocateIdResp();
  virtual ~AllocateIdResp();

  AllocateIdResp(const AllocateIdResp& from);

  inline AllocateIdResp& operator=(const AllocateIdResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocateIdResp(AllocateIdResp&& from) noexcept
    : AllocateIdResp() {
    *this = ::std::move(from);
  }

  inline AllocateIdResp& operator=(AllocateIdResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateIdResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocateIdResp* internal_default_instance() {
    return reinterpret_cast<const AllocateIdResp*>(
               &_AllocateIdResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AllocateIdResp* other);
  friend void swap(AllocateIdResp& a, AllocateIdResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocateIdResp* New() const final {
    return CreateMaybeMessage<AllocateIdResp>(NULL);
  }

  AllocateIdResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllocateIdResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllocateIdResp& from);
  void MergeFrom(const AllocateIdResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocateIdResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:idallocator.AllocateIdResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_idallocator_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchAllocateIdReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idallocator.BatchAllocateIdReq) */ {
 public:
  BatchAllocateIdReq();
  virtual ~BatchAllocateIdReq();

  BatchAllocateIdReq(const BatchAllocateIdReq& from);

  inline BatchAllocateIdReq& operator=(const BatchAllocateIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchAllocateIdReq(BatchAllocateIdReq&& from) noexcept
    : BatchAllocateIdReq() {
    *this = ::std::move(from);
  }

  inline BatchAllocateIdReq& operator=(BatchAllocateIdReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchAllocateIdReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchAllocateIdReq* internal_default_instance() {
    return reinterpret_cast<const BatchAllocateIdReq*>(
               &_BatchAllocateIdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BatchAllocateIdReq* other);
  friend void swap(BatchAllocateIdReq& a, BatchAllocateIdReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchAllocateIdReq* New() const final {
    return CreateMaybeMessage<BatchAllocateIdReq>(NULL);
  }

  BatchAllocateIdReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchAllocateIdReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchAllocateIdReq& from);
  void MergeFrom(const BatchAllocateIdReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchAllocateIdReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes id_namespace = 1;
  void clear_id_namespace();
  static const int kIdNamespaceFieldNumber = 1;
  const ::std::string& id_namespace() const;
  void set_id_namespace(const ::std::string& value);
  #if LANG_CXX11
  void set_id_namespace(::std::string&& value);
  #endif
  void set_id_namespace(const char* value);
  void set_id_namespace(const void* value, size_t size);
  ::std::string* mutable_id_namespace();
  ::std::string* release_id_namespace();
  void set_allocated_id_namespace(::std::string* id_namespace);

  // uint32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:idallocator.BatchAllocateIdReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_namespace_;
  ::google::protobuf::uint32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_idallocator_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchAllocateIdResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idallocator.BatchAllocateIdResp) */ {
 public:
  BatchAllocateIdResp();
  virtual ~BatchAllocateIdResp();

  BatchAllocateIdResp(const BatchAllocateIdResp& from);

  inline BatchAllocateIdResp& operator=(const BatchAllocateIdResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchAllocateIdResp(BatchAllocateIdResp&& from) noexcept
    : BatchAllocateIdResp() {
    *this = ::std::move(from);
  }

  inline BatchAllocateIdResp& operator=(BatchAllocateIdResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchAllocateIdResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchAllocateIdResp* internal_default_instance() {
    return reinterpret_cast<const BatchAllocateIdResp*>(
               &_BatchAllocateIdResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BatchAllocateIdResp* other);
  friend void swap(BatchAllocateIdResp& a, BatchAllocateIdResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchAllocateIdResp* New() const final {
    return CreateMaybeMessage<BatchAllocateIdResp>(NULL);
  }

  BatchAllocateIdResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchAllocateIdResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchAllocateIdResp& from);
  void MergeFrom(const BatchAllocateIdResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchAllocateIdResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  ::google::protobuf::uint64 ids(int index) const;
  void set_ids(int index, ::google::protobuf::uint64 value);
  void add_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:idallocator.BatchAllocateIdResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ids_;
  mutable int _ids_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_idallocator_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AllocateIdReq

// bytes id_namespace = 1;
inline void AllocateIdReq::clear_id_namespace() {
  id_namespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllocateIdReq::id_namespace() const {
  // @@protoc_insertion_point(field_get:idallocator.AllocateIdReq.id_namespace)
  return id_namespace_.GetNoArena();
}
inline void AllocateIdReq::set_id_namespace(const ::std::string& value) {
  
  id_namespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idallocator.AllocateIdReq.id_namespace)
}
#if LANG_CXX11
inline void AllocateIdReq::set_id_namespace(::std::string&& value) {
  
  id_namespace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idallocator.AllocateIdReq.id_namespace)
}
#endif
inline void AllocateIdReq::set_id_namespace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_namespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idallocator.AllocateIdReq.id_namespace)
}
inline void AllocateIdReq::set_id_namespace(const void* value, size_t size) {
  
  id_namespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idallocator.AllocateIdReq.id_namespace)
}
inline ::std::string* AllocateIdReq::mutable_id_namespace() {
  
  // @@protoc_insertion_point(field_mutable:idallocator.AllocateIdReq.id_namespace)
  return id_namespace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllocateIdReq::release_id_namespace() {
  // @@protoc_insertion_point(field_release:idallocator.AllocateIdReq.id_namespace)
  
  return id_namespace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllocateIdReq::set_allocated_id_namespace(::std::string* id_namespace) {
  if (id_namespace != NULL) {
    
  } else {
    
  }
  id_namespace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_namespace);
  // @@protoc_insertion_point(field_set_allocated:idallocator.AllocateIdReq.id_namespace)
}

// -------------------------------------------------------------------

// AllocateIdResp

// uint64 id = 1;
inline void AllocateIdResp::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AllocateIdResp::id() const {
  // @@protoc_insertion_point(field_get:idallocator.AllocateIdResp.id)
  return id_;
}
inline void AllocateIdResp::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:idallocator.AllocateIdResp.id)
}

// -------------------------------------------------------------------

// BatchAllocateIdReq

// bytes id_namespace = 1;
inline void BatchAllocateIdReq::clear_id_namespace() {
  id_namespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchAllocateIdReq::id_namespace() const {
  // @@protoc_insertion_point(field_get:idallocator.BatchAllocateIdReq.id_namespace)
  return id_namespace_.GetNoArena();
}
inline void BatchAllocateIdReq::set_id_namespace(const ::std::string& value) {
  
  id_namespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idallocator.BatchAllocateIdReq.id_namespace)
}
#if LANG_CXX11
inline void BatchAllocateIdReq::set_id_namespace(::std::string&& value) {
  
  id_namespace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idallocator.BatchAllocateIdReq.id_namespace)
}
#endif
inline void BatchAllocateIdReq::set_id_namespace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_namespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idallocator.BatchAllocateIdReq.id_namespace)
}
inline void BatchAllocateIdReq::set_id_namespace(const void* value, size_t size) {
  
  id_namespace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idallocator.BatchAllocateIdReq.id_namespace)
}
inline ::std::string* BatchAllocateIdReq::mutable_id_namespace() {
  
  // @@protoc_insertion_point(field_mutable:idallocator.BatchAllocateIdReq.id_namespace)
  return id_namespace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchAllocateIdReq::release_id_namespace() {
  // @@protoc_insertion_point(field_release:idallocator.BatchAllocateIdReq.id_namespace)
  
  return id_namespace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchAllocateIdReq::set_allocated_id_namespace(::std::string* id_namespace) {
  if (id_namespace != NULL) {
    
  } else {
    
  }
  id_namespace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_namespace);
  // @@protoc_insertion_point(field_set_allocated:idallocator.BatchAllocateIdReq.id_namespace)
}

// uint32 count = 2;
inline void BatchAllocateIdReq::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 BatchAllocateIdReq::count() const {
  // @@protoc_insertion_point(field_get:idallocator.BatchAllocateIdReq.count)
  return count_;
}
inline void BatchAllocateIdReq::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:idallocator.BatchAllocateIdReq.count)
}

// -------------------------------------------------------------------

// BatchAllocateIdResp

// repeated uint64 ids = 1;
inline int BatchAllocateIdResp::ids_size() const {
  return ids_.size();
}
inline void BatchAllocateIdResp::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint64 BatchAllocateIdResp::ids(int index) const {
  // @@protoc_insertion_point(field_get:idallocator.BatchAllocateIdResp.ids)
  return ids_.Get(index);
}
inline void BatchAllocateIdResp::set_ids(int index, ::google::protobuf::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:idallocator.BatchAllocateIdResp.ids)
}
inline void BatchAllocateIdResp::add_ids(::google::protobuf::uint64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:idallocator.BatchAllocateIdResp.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BatchAllocateIdResp::ids() const {
  // @@protoc_insertion_point(field_list:idallocator.BatchAllocateIdResp.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BatchAllocateIdResp::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:idallocator.BatchAllocateIdResp.ids)
  return &ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idallocator

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_idallocator_2eproto
